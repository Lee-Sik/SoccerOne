// Generated by CoffeeScript 1.6.1
(function() {
  var BubbleChart, root,
    _this = this;

  BubbleChart = (function() {

    function BubbleChart(data) {
      var max_amount,
        _this = this;
      this.hide_details = function(data, i, element) {
        return BubbleChart.prototype.hide_details.apply(_this, arguments);
      };
      this.show_details = function(data, i, element) {
        return BubbleChart.prototype.show_details.apply(_this, arguments);
      };
      this.hide_districts = function() {
        return BubbleChart.prototype.hide_districts.apply(_this, arguments);
      };
      this.hide_all_stat = function() {
        return BubbleChart.prototype.hide_all_stat.apply(_this, arguments);
      };
      this.display_districts = function(d) {
        return BubbleChart.prototype.display_districts.apply(_this, arguments);
      };
      this.calculate_total = function(d) {
        return BubbleChart.prototype.calculate_total.apply(_this, arguments);
      };
      this.display_all_stat = function(d) {
        return BubbleChart.prototype.display_all_stat.apply(_this, arguments);
      };
      this.move_towards_district = function(alpha) {
        return BubbleChart.prototype.move_towards_district.apply(_this, arguments);
      };
      this.display_by_district = function() {
        return BubbleChart.prototype.display_by_district.apply(_this, arguments);
      };
      this.move_towards_district_center = function(alpha) {
        return BubbleChart.prototype.move_towards_district_center.apply(_this, arguments);
      };
      this.display_group_all = function() {
        return BubbleChart.prototype.display_group_all.apply(_this, arguments);
      };
      this.start = function() {
        return BubbleChart.prototype.start.apply(_this, arguments);
      };
      this.create_vis = function() {
        return BubbleChart.prototype.create_vis.apply(_this, arguments);
      };
      this.create_nodes = function() {
        return BubbleChart.prototype.create_nodes.apply(_this, arguments);
      };
      this.data = data;
      this.width = 940;
      this.height = 700;
      this.padding = 70;
      this.district_count = 25;
      this.group = ["일반", "저소득", "국민기초생활보장수급권자"];
      this.total = 0;
      this.total1 = 0;
      this.total2 = 0;
      this.total3 = 0;
      this.tooltip = CustomTooltip("gates_tooltip", 'auto');
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.centers = [
        {
          x: this.width / 5 - this.width / 10 + this.padding,
          y: this.height / 5 - this.height / 10 + this.padding * 1.5
        }, {
          x: 2 * this.width / 5 - this.width / 10 + this.padding * 0.5,
          y: this.height / 5 - this.height / 10 + this.padding * 1.5
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: this.height / 5 - this.height / 10 + this.padding * 1.5
        }, {
          x: 4 * this.width / 5 - this.width / 10 - this.padding * 0.5,
          y: this.height / 5 - this.height / 10 + this.padding * 1.5
        }, {
          x: 5 * this.width / 5 - this.width / 10 - this.padding,
          y: this.height / 5 - this.height / 10 + this.padding * 1.5
        }, {
          x: this.width / 5 - this.width / 10 + this.padding,
          y: 2 * this.height / 5 - this.height / 10 + this.padding
        }, {
          x: 2 * this.width / 5 - this.width / 10 + this.padding * 0.5,
          y: 2 * this.height / 5 - this.height / 10 + this.padding
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 2 * this.height / 5 - this.height / 10 + this.padding
        }, {
          x: 4 * this.width / 5 - this.width / 10 - this.padding * 0.5,
          y: 2 * this.height / 5 - this.height / 10 + this.padding
        }, {
          x: 5 * this.width / 5 - this.width / 10 - this.padding,
          y: 2 * this.height / 5 - this.height / 10 + this.padding
        }, {
          x: this.width / 5 - this.width / 10 + this.padding,
          y: 3 * this.height / 5 - this.height / 10 + this.padding * 0.3
        }, {
          x: 2 * this.width / 5 - this.width / 10 + this.padding * 0.5,
          y: 3 * this.height / 5 - this.height / 10 + this.padding * 0.3
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 3 * this.height / 5 - this.height / 10 + this.padding * 0.3
        }, {
          x: 4 * this.width / 5 - this.width / 10 - this.padding * 0.5,
          y: 3 * this.height / 5 - this.height / 10 + this.padding * 0.3
        }, {
          x: 5 * this.width / 5 - this.width / 10 - this.padding,
          y: 3 * this.height / 5 - this.height / 10 + this.padding * 0.3
        }, {
          x: this.width / 5 - this.width / 10 + this.padding,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 2 * this.width / 5 - this.width / 10 + this.padding * 0.5,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 4 * this.width / 5 - this.width / 10 - this.padding * 0.5,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 5 * this.width / 5 - this.width / 10 - this.padding,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: this.width / 5 - this.width / 10 + this.padding,
          y: 5 * this.height / 5 - this.height / 10 - this.padding
        }, {
          x: 2 * this.width / 5 - this.width / 10 + this.padding * 0.5,
          y: 5 * this.height / 5 - this.height / 10 - this.padding
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 5 * this.height / 5 - this.height / 10 - this.padding
        }, {
          x: 4 * this.width / 5 - this.width / 10 - this.padding * 0.5,
          y: 5 * this.height / 5 - this.height / 10 - this.padding
        }, {
          x: 5 * this.width / 5 - this.width / 10 - this.padding,
          y: 5 * this.height / 5 - this.height / 10 - this.padding
        }
      ];
      this.district_centers = [
        {
          x: this.width / 5 - this.width / 10,
          y: this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 2 * this.width / 5 - this.width / 10,
          y: this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 4 * this.width / 5 - this.width / 10,
          y: this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: 5 * this.width / 5 - this.width / 10,
          y: this.height / 5 - this.height / 10 - this.padding * 0.3
        }, {
          x: this.width / 5 - this.width / 10,
          y: 2 * this.height / 5 - this.height / 10 + this.padding * 0.1
        }, {
          x: 2 * this.width / 5 - this.width / 10,
          y: 2 * this.height / 5 - this.height / 10 + this.padding * 0.1
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 2 * this.height / 5 - this.height / 10 + this.padding * 0.1
        }, {
          x: 4 * this.width / 5 - this.width / 10,
          y: 2 * this.height / 5 - this.height / 10 + this.padding * 0.1
        }, {
          x: 5 * this.width / 5 - this.width / 10,
          y: 2 * this.height / 5 - this.height / 10 + this.padding * 0.1
        }, {
          x: this.width / 5 - this.width / 10,
          y: 3 * this.height / 5 - this.height / 10
        }, {
          x: 2 * this.width / 5 - this.width / 10,
          y: 3 * this.height / 5 - this.height / 10
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 3 * this.height / 5 - this.height / 10
        }, {
          x: 4 * this.width / 5 - this.width / 10,
          y: 3 * this.height / 5 - this.height / 10
        }, {
          x: 5 * this.width / 5 - this.width / 10,
          y: 3 * this.height / 5 - this.height / 10
        }, {
          x: this.width / 5 - this.width / 10,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.2
        }, {
          x: 2 * this.width / 5 - this.width / 10,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.2
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.2
        }, {
          x: 4 * this.width / 5 - this.width / 10,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.2
        }, {
          x: 5 * this.width / 5 - this.width / 10,
          y: 4 * this.height / 5 - this.height / 10 - this.padding * 0.2
        }, {
          x: this.width / 5 - this.width / 10,
          y: 5 * this.height / 5 - this.height / 10 - this.padding * 0.4
        }, {
          x: 2 * this.width / 5 - this.width / 10,
          y: 5 * this.height / 5 - this.height / 10 - this.padding * 0.4
        }, {
          x: 3 * this.width / 5 - this.width / 10,
          y: 5 * this.height / 5 - this.height / 10 - this.padding * 0.4
        }, {
          x: 4 * this.width / 5 - this.width / 10,
          y: 5 * this.height / 5 - this.height / 10 - this.padding * 0.4
        }, {
          x: 5 * this.width / 5 - this.width / 10,
          y: 5 * this.height / 5 - this.height / 10 - this.padding * 0.4
        }
      ];
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal().domain(this.group).range(["#aee4ff", "#bee9b4", "#b5c7ed"]);
      max_amount = d3.max(this.data, function(d) {
        return parseInt(d.value);
      });
      this.radius_scale = d3.scale.pow().exponent(0.7).domain([0, max_amount]).range([2, 50]);
      this.create_nodes();
      this.create_vis();
    }

    BubbleChart.prototype.create_nodes = function() {
      var _this = this;
      this.data.forEach(function(d) {
        var node;
        node = {
          id: d.id,
          radius: _this.radius_scale(parseInt(d.value)),
          value: d.value,
          district: d.district,
          group: d.group,
          population: d.population,
          order: d.order,
          x: Math.random() * 900,
          y: Math.random() * 800
        };
        return _this.nodes.push(node);
      });
      return this.nodes.sort(function(a, b) {
        return b.value - a.value;
      });
    };

    BubbleChart.prototype.create_vis = function() {
      var that,
        _this = this;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", function(d) {
        return _this.fill_color(d.group);
      }).attr("stroke-width", 2).attr("stroke", function(d) {
        return d3.rgb(_this.fill_color(d.group)).darker();
      }).attr("id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.display_group_all = function() {
      var _this = this;
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", function(e) {
        return _this.circles.each(_this.move_towards_district_center(e.alpha)).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
      });
      this.force.start();
      this.circles.attr('class', 'all');
      d3.select('#vis').attr('class', 'bg');
      this.display_all_stat();
      return this.hide_districts();
    };

    BubbleChart.prototype.move_towards_district_center = function(alpha) {
      var _this = this;
      return function(d) {
        switch (d.id % 25) {
          case 1:
            d.x = d.x + (460 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (320 - d.y) * (_this.damper + 0.02) * alpha;
          case 2:
            d.x = d.x + (495 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (360 - d.y) * (_this.damper + 0.02) * alpha;
          case 3:
            d.x = d.x + (465 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (400 - d.y) * (_this.damper + 0.02) * alpha;
          case 4:
            d.x = d.x + (550 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (365 - d.y) * (_this.damper + 0.02) * alpha;
          case 5:
            d.x = d.x + (590 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (370 - d.y) * (_this.damper + 0.02) * alpha;
          case 6:
            d.x = d.x + (560 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (330 - d.y) * (_this.damper + 0.02) * alpha;
          case 7:
            d.x = d.x + (600 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (300 - d.y) * (_this.damper + 0.02) * alpha;
          case 8:
            d.x = d.x + (530 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (310 - d.y) * (_this.damper + 0.02) * alpha;
          case 9:
            d.x = d.x + (510 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (250 - d.y) * (_this.damper + 0.02) * alpha;
          case 10:
            d.x = d.x + (545 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (190 - d.y) * (_this.damper + 0.02) * alpha;
          case 11:
            d.x = d.x + (600 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (220 - d.y) * (_this.damper + 0.02) * alpha;
          case 12:
            d.x = d.x + (410 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (270 - d.y) * (_this.damper + 0.02) * alpha;
          case 13:
            d.x = d.x + (410 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (340 - d.y) * (_this.damper + 0.02) * alpha;
          case 14:
            d.x = d.x + (380 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (380 - d.y) * (_this.damper + 0.02) * alpha;
          case 15:
            d.x = d.x + (320 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (430 - d.y) * (_this.damper + 0.02) * alpha;
          case 16:
            d.x = d.x + (270 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (360 - d.y) * (_this.damper + 0.02) * alpha;
          case 17:
            d.x = d.x + (280 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (470 - d.y) * (_this.damper + 0.02) * alpha;
          case 18:
            d.x = d.x + (370 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (520 - d.y) * (_this.damper + 0.02) * alpha;
          case 19:
            d.x = d.x + (380 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (430 - d.y) * (_this.damper + 0.02) * alpha;
          case 20:
            d.x = d.x + (430 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (450 - d.y) * (_this.damper + 0.02) * alpha;
          case 21:
            d.x = d.x + (430 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (500 - d.y) * (_this.damper + 0.02) * alpha;
          case 22:
            d.x = d.x + (520 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (480 - d.y) * (_this.damper + 0.02) * alpha;
          case 23:
            d.x = d.x + (550 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (450 - d.y) * (_this.damper + 0.02) * alpha;
          case 24:
            d.x = d.x + (640 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (450 - d.y) * (_this.damper + 0.02) * alpha;
          case 0:
            d.x = d.x + (680 - d.x) * (_this.damper + 0.02) * alpha;
            return d.y = d.y + (370 - d.y) * (_this.damper + 0.02) * alpha;
        }
      };
    };

    BubbleChart.prototype.display_by_district = function() {
      var _this = this;
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", function(e) {
        return _this.circles.each(_this.move_towards_district(e.alpha)).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
      });
      this.force.start();
      this.circles.attr('class', 'district').each(this.display_districts);
      d3.select('#vis').attr('class', '');
      return this.hide_all_stat();
    };

    BubbleChart.prototype.move_towards_district = function(alpha) {
      var _this = this;
      return function(d) {
        var target;
        target = _this.centers[d.order - 1];
        d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
        return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
      };
    };

    BubbleChart.prototype.display_all_stat = function(d) {
      var bar_chart, bar_chart_data, bar_chart_height, bar_chart_text_position, bar_chart_width, bottom_padding,
        _this = this;
      if (this.total === 0) {
        this.circles.each(this.calculate_total);
      }
      bar_chart_height = 200;
      bar_chart_width = 120;
      bottom_padding = 25;
      bar_chart = this.vis.append('g').attr('x', 0).attr('y', 0).attr("class", "all_stat").attr('transform', 'translate(' + (this.width - bar_chart_width) + ', 30)').attr('width', bar_chart_width).attr('height', bar_chart_height);
      bar_chart_data = [this.total1, this.total2, this.total3];
      bar_chart.selectAll('rect').data(bar_chart_data).enter().append('rect').attr('x', function(d, i) {
        return i * 25 + 10;
      }).attr('y', function(d) {
        return bar_chart_height - d / 1000 - bottom_padding;
      }).attr('class', function(d, i){
        return 'all_stat_' + '' + (i + 1);
      }).attr('width', 20).attr('height', function(d) {
        return d / 1000;
      }).attr("fill", function(d, i) {
        return _this.fill_color(_this.group[i]);
      }).attr("stroke-width", 2).attr("stroke", function(d, i) {
        return d3.rgb(_this.fill_color(_this.group[i])).darker();
      });
      bar_chart_text_position = ['0, 5', '-25, 20', '15, 20'];
      bar_chart.selectAll('text').data(bar_chart_data).enter().append('text').text(function(d) {
        return addCommas(d) + '명';
      }).attr('y', function(d) {
        return bar_chart_height - d / 1000 - bottom_padding - 10;
      }).style('font-size', '10px').attr("text-anchor", "start").attr('transform', function(d, i) {
        return 'translate(' + bar_chart_text_position[i] + ') rotate(-30)';
      });
      return bar_chart.append("text").attr('x', 0).attr('y', bar_chart_height).attr("class", "all_stat").attr("text-anchor", "start").text('전체: ' + addCommas(this.total) + '명');
      /*
      @vis
          .append("text")
          .attr('x', 0)
          .attr('y', 80)
          .attr("class", "all_stat")
          .attr("text-anchor", "start")
          .text('일반: ' + addCommas(@total1) + '명 (' + (@total1 * 100 / @total).toFixed(2) + '%)')
          
      @vis
          .append("text")
          .attr('x', 0)
          .attr('y', 100)
          .attr("class", "all_stat")
          .attr("text-anchor", "start")
          .text('저소득: ' + addCommas(@total2) + '명 (' + (@total2 * 100 / @total).toFixed(2) + '%)')
          
      @vis
          .append("text")
          .attr('x', 0)
          .attr('y', 120)
          .attr("class", "all_stat")
          .attr("text-anchor", "start")
          .text('기초생활수급권자: ' + addCommas(@total3) + '명 (' + (@total3 * 100 / @total).toFixed(2) + '%)')
      */

    };

    BubbleChart.prototype.calculate_total = function(d) {
      if (d.id < 26) {
        this.total += +d.population;
        return this.total3 += +d.value;
      } else if (d.id < 51) {
        return this.total2 += +d.value;
      } else {
        return this.total1 += +d.value;
      }
    };

    BubbleChart.prototype.display_districts = function(d) {
      var target;
      if (d.id < 26) {
        target = this.district_centers[d.order - 1];
        return this.vis.append("text").attr('x', target.x).attr('y', target.y).attr("class", "districts").attr("text-anchor", "middle").text(d.district + ': ' + addCommas(d.population) + '명');
      }
    };

    BubbleChart.prototype.hide_all_stat = function() {
      return this.vis.selectAll(".all_stat").remove();
    };

    BubbleChart.prototype.hide_districts = function() {
      return this.vis.selectAll(".districts").remove();
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content, id, item, rate1, rate2, rate3, values;
      if (element.className.baseVal === 'all') {
        content = "<span class=\"value\"> <strong>" + data.district + "</strong></span><br/>";
        content += "<span class=\"value\"> <strong>" + data.group + ": " + (addCommas(data.value)) + "명</strong></span><br/>";
        content += ("<span class=\"value\" style=\"font-size:10px;\"> 전체: " + (addCommas(data.population)) + "명 (") + data.order + " / " + this.district_count + "위)</span>";
      } else if (element.className.baseVal === 'district') {
        values = (function() {
          var _ref, _results;
          _ref = this.data;
          _results = [];
          for (id in _ref) {
            item = _ref[id];
            if (item.id % this.district_count === data.id % this.district_count) {
              _results.push(item.value);
            } else {
              continue;
            }
          }
          return _results;
        }).call(this);
        rate1 = (values[2] * 100 / data.population).toFixed(2);
        rate2 = (values[1] * 100 / data.population).toFixed(2);
        rate3 = (values[0] * 100 / data.population).toFixed(2);
        content = ("<span class=\"name\">상위:</span><span class=\"value\">" + (addCommas(values[2])) + "명 (") + rate1 + "%)</span><br/>";
        content += ("<span class=\"name\">중위:</span><span class=\"value\">" + (addCommas(values[1])) + "명 (") + rate2 + "%)</span><br/>";
        content += ("<span class=\"name\">하위:</span><span class=\"value\">" + (addCommas(values[0])) + "명 (") + rate3 + "%)</span>";
      }
      d3.select(element).attr("stroke", "black");
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      var _this = this;
      d3.select(element).attr("stroke", function(d) {
        return d3.rgb(_this.fill_color(d.group)).darker();
      });
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis,
      _this = this;
    chart = null;
    render_vis = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return root.display_all();
    };
    root.display_all = function() {
      return chart.display_group_all();
    };
    root.display_district = function() {
      return chart.display_by_district();
    };
    root.toggle_view = function(view_type) {
      if (view_type === 'district') {
        return root.display_district();
      } else {
        return root.display_all();
      }
    };
    return d3.csv("data/test3.csv", render_vis);
  });

}).call(this);